// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    And16(a[0]=false, a[1]=false, a[2]=false, a[3]=false, a[4]=false, a[5]=false, a[6]=false, a[7]=false, a[8]=false, a[9]=false, a[10]=false, a[11]=false, a[12]=false, a[13]=false, a[14]=false, a[15]=false, b=x, out=zeroes16);
    Or16(a[0]=true, a[1]=true, a[2]=true, a[3]=true, a[4]=true, a[5]=true, a[6]=true, a[7]=true, a[8]=true, a[9]=true, a[10]=true, a[11]=true, a[12]=true, a[13]=true, a[14]=true, a[15]=true, b=x, out=ones16);

    Mux16(a=x, b=zeroes16, sel=zx, out=x1);
    Mux16(a=y, b=zeroes16, sel=zy, out=y1);

    Not16(in=x1, out=nx1);
    Not16(in=y1, out=ny1);

    Mux16(a=x1, b=nx1, sel=nx, out=x2);
    Mux16(a=y1, b=ny1, sel=ny, out=y2);

    Add16(a=x2, b=y2, out=sumxy);
    And16(a=x2, b=y2, out=andxy);

    Mux16(a=andxy, b=sumxy, sel=f, out=r1);

    Not16(in=r1, out=nr1);

    Mux16(a=r1, b=nr1, sel=no, out[15]=ng, out[0..7]=outlo, out[8..15]=outhi);

    And16(a[0..7]=outlo, a[8..15]=outhi, b[0..7]=outlo, b[8..15]=outhi, out=out);

    Or8Way(in=outlo, out=zr1);
    Or8Way(in=outhi, out=zr2);
    Or(a=zr1, b=zr2, out=zr3);
    Not(in=zr3, out=zr);
}
